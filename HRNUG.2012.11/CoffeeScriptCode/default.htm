<!DOCTYPE html>
<html>
<head>
    <title>CoffeeScript</title>
    <meta name="viewport" content="width=1024" />
    <link href="impress-demo.css" rel="stylesheet" />
    <link href="prettify.css" rel="stylesheet" />
</head>
<body>
<div id="impress">
    <div class="step slide" id="js" data-x="0" data-y="0">
        <q>JavaScript is great</q>
        <ul>
            <li>Dynamic</li>
            <li>Expressive</li>
            <li>Object Oriented</li>
        </ul>
        <p>But...</p>
    </div>
    <div class="step slide" id="problems" data-x="2000" data-y="0">
        <div class="title">It has problems</div>
    </div>
    <div class="step slide" id="jsproblems" data-x="4000" data-y="0">
        <q>
            Some of it is unintuitive
        </q>
        <pre class="prettyprint" id="arrayloop" data-type="javascript">
var getObject = function() {
    return
    {
        name: 'Bill'
    }
}
alert(getObject().name);
        </pre>
        <button data-run="arrayloop">Run</button>
    </div>
    <div class="step slide" id="jslocalloop" data-x="6000" data-y="0">
        <q>Or how about</q>
        <pre class="prettyprint" id="localloop" data-type="javascript">
var myArray = [1,2,3];
for (var i=0; i&lt;myArray.length; i++) {
    var item = myArray[i];
    alert(item);
}
var i;
alert(i);
        </pre>
        <button data-run="localloop">Run</button>
    </div>
    <div class="step slide" id="inheritance" data-x="8000" data-y="0">
        <q>Odd syntax choices</q>
        <p>Inheritance is troublesome</p>
        <pre class="prettyprint" id="inheritancecode" data-type="javascript">
function Animal(name) {
    this.name = name;
}
Animal.prototype.toString = function() {
    return this.name;
}
Animal.prototype.sayHello = function() {
    return "Hello, " + this.name;
}

Dog.prototype = new Animal();
Dog.prototype.constructor = Dog;
Dog.prototype.toString = function() {
    return "Breed: " + this.breed + "; Name: " + this.name;
}
function Dog(name, breed) {
    this.name = name;
    this.breed = breed;
}

var myDog = new Dog('blondy', 'Cavalier Spaniel');
alert(myDog.sayHello());
alert(myDog.toString());
        </pre>
        <button data-run="inheritancecode">Run</button>
    </div>
    <div class="step slide" id="coffeescript" data-x="10000" data-y="0">
        <q>Introducing CoffeeScript</q>
        <ul>
            <li>Compiles to JavaScript, so it works in all browsers.</li>
            <li>Takes care of some pesky JavaScript syntax.</li>
            <li>Interops with existing JavaScript code just fine</li>
            <li>No wheels have been reinvented.</li>
        </ul>
    </div>
    <div class="step slide" id="listcomprehension" data-x="12000" data-y="0">
        <q>List comprehensions</q>
        <pre class="prettyprint" data-type="coffeescript" id="coffeeloop">
items = [1, 2, 3, 4, 5];
alert(item) for item in items
        </pre>
        <button data-run="coffeeloop">Run</button>
    </div>
    <div class="step slide" id="listranges" data-x="14000" data-y="0">
        <q>Array Ranges</q>
        <pre class="prettyprint" data-type="coffeescript" id="listrange">
items = [1..5];
alert(item) for item in items
        </pre>
        <button data-run="listrange">Run</button>
    </div>
    <div class="step slide" id="lexicalscope" data-x="16000" data-y="0">
        <q>Discourages global scope</q>
        <p>Everything is wrapped in a self executing function to avoid global scope</p>
        <pre class="prettyprint" data-type="coffeescript">
alert 'hi'
i = 'foo'
        </pre>
        <p>And parenthesis are optional (sometimes)</p>
        <p class="small">Just use parenthesis</p>
    </div>
    <div class="step slide" id="nobraces" data-x="18000" data-y="0">
        <q>Indentation is used for braces, no semicolons</q>
        <pre class="prettyprint" id="whosbill" data-type="coffeescript">
getObject = ->
    name: "Bill"
    age: 45
alert(getObject().name)
        </pre>
        <button data-run="whosbill">Run</button>
    </div>
    <div class="step slide" id="skinnyarrow" data-x="20000" data-y="0">
        <q>Skinny arrows declare functions</q>
        <pre class="prettyprint" id="jcallbackalert" data-type="coffeescript">
$.getJSON('jsonresponse.json', (d) ->
    alert(d.message)
)
        </pre>
        <button data-run="jcallbackalert">Run</button>
    </div>
    <div class="step slide" id="newthis" data-x="22000" data-y="0">
        <q>Use '@' instead of this.</q>
        <pre class="prettyprint" data-type="coffeescript">
$('#runbutton').click(->
    alert $(@).attr('id')
)
        </pre>
        <button id="runbutton">Run</button>
    </div>
    <div class="step slide" id="fatarrow" data-x="24000" data-y="0">
        <q>Fat arrows capture 'this' in the function</q>
        <pre class="prettyprint" id="jcallbacktext" data-type="coffeescript">
$('#ajaxrunbutton').click(->
    $.getJSON('jsonresponse.json', (d) =>
        $(@).text(d.message);
    )
)
        </pre>
        <button id="ajaxrunbutton">Run</button>
    </div>
    <div class="step slide" id="stringinterpol" data-x="26000" data-y="0">
        <q>String Interpolation</q>
        <pre class="prettyprint" id="stringinterpolation" data-type="coffeescript">
x = 1
y = 2
alert("#{x + y}")
        </pre>
        <button data-run="stringinterpolation">Run</button>
    </div>
    <div class="step slide" id="classes" data-x="28000" data-y="0">
        <q>Class Support</q>
<pre class="prettyprint" data-type="coffeescript" id="animalcode">
class Animal
    constructor: (name) ->
        @name = name
    toString: () ->
        @name
someAnimal = new Animal('Penguin')
alert(someAnimal.name)
</pre>
        <button data-run="animalcode">Run</button>
    </div>
    <div class="step slide" id="classinheritance" data-x="30000" data-y="0">
        <q>Easy Inheritance</q>
        <p>Object oriented isn't difficult in CoffeeScript</p>
    <pre class="prettyprint" data-type="coffeescript" id="inheritcode">
    class Animal
        constructor: (name) ->
            @name = name
        sayHello: () ->
            "Hello, #{@name}"
        toString: () ->
            @name

    class Dog extends Animal
        constructor: (breed, name) ->
            super name
            @breed = breed

    myDog = new Dog('Cavalier Spaniel', 'Blondy')
    alert(myDog.sayHello())
    </pre>
        <button data-run="inheritcode">Run</button>
    </div>
</div>
<script src="impress.js" type="text/javascript"></script>
<script src="prettify.js" type="text/javascript"></script>
<script src="coffee-script.js" type="text/javascript"></script>
<script src="jquery-1.7.2.min.js" type="text/javascript"></script>
<script type="text/javascript">
    impress().init();
</script>
<script src="coffee-demo.coffee" type="text/coffeescript"></script>
</body>
</html>